### YamlMime:UniversalReference
items:
  - uid: '@azure/cosmos.Containers'
    name: Containers
    fullName: Containers
    children:
      - '@azure/cosmos.Containers.constructor'
      - '@azure/cosmos.Containers.create'
      - '@azure/cosmos.Containers.createIfNotExists'
      - '@azure/cosmos.Containers.database'
      - '@azure/cosmos.Containers.query'
      - '@azure/cosmos.Containers.query_1'
      - '@azure/cosmos.Containers.readAll'
    langs:
      - typeScript
    type: class
    summary: >-
      Operations for creating new containers, and reading/querying all
      containers
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Containers.constructor'
    name: 'Containers(Database, ClientContext)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new Containers(database: Database, clientContext: ClientContext)'
      parameters:
        - id: database
          type:
            - '@azure/cosmos.Database'
          description: ''
        - id: clientContext
          type:
            - ClientContext
          description: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Containers.create'
    name: 'create(ContainerRequest, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Creates a container.

      A container is a named logical container for items.


      A database may contain zero or more named containers and each container
      consists of

      zero or more JSON items.


      Being schema-free, the items in a container do not need to share the same
      structure or fields.



      Since containers are application resources, they can be authorized using
      either the

      master key or resource keys.
    syntax:
      content: 'function create(body: ContainerRequest, options?: RequestOptions)'
      parameters:
        - id: body
          type:
            - '@azure/cosmos.ContainerRequest'
          description: Represents the body of the container.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: >
            Use to set options like response page size, continuation tokens,
            etc.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.ContainerResponse>
        description: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Containers.createIfNotExists'
    name: 'createIfNotExists(ContainerRequest, RequestOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Checks if a Container exists, and, if it doesn't, creates it.

      This will make a read operation based on the id in the `body`, then if it
      is not found, a create operation.

      You should confirm that the output matches the body you passed in for
      non-default properties (i.e. indexing policy/etc.)

      A container is a named logical container for items.


      A database may contain zero or more named containers and each container
      consists of

      zero or more JSON items.


      Being schema-free, the items in a container do not need to share the same
      structure or fields.



      Since containers are application resources, they can be authorized using
      either the

      master key or resource keys.
    syntax:
      content: >-
        function createIfNotExists(body: ContainerRequest, options?:
        RequestOptions)
      parameters:
        - id: body
          type:
            - '@azure/cosmos.ContainerRequest'
          description: Represents the body of the container.
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: >
            Use to set options like response page size, continuation tokens,
            etc.
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.ContainerResponse>
        description: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Containers.database'
    name: database
    fullName: database
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'database: Database'
      return:
        type:
          - '@azure/cosmos.Database'
        description: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Containers.query'
    name: 'query(SqlQuerySpec, FeedOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Queries all containers.
    syntax:
      content: 'function query(query: SqlQuerySpec, options?: FeedOptions)'
      parameters:
        - id: query
          type:
            - '@azure/cosmos.SqlQuerySpec'
          description: >-
            Query configuration for the operation. See <xref:SqlQuerySpec> for
            more info on how to configure a query.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: >-
            Use to set options like response page size, continuation tokens,
            etc.
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator<any>'
        description: >-
          Allows you to return specific containers in an array or iterate over
          them one at a time.
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Containers.query_1'
    name: 'query(SqlQuerySpec, FeedOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Queries all containers.
    syntax:
      content: 'function query<T>(query: SqlQuerySpec, options?: FeedOptions)'
      parameters:
        - id: query
          type:
            - '@azure/cosmos.SqlQuerySpec'
          description: >-
            Query configuration for the operation. See <xref:SqlQuerySpec> for
            more info on how to configure a query.
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: >-
            Use to set options like response page size, continuation tokens,
            etc.
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator<T>'
        description: >-
          Allows you to return specific containers in an array or iterate over
          them one at a time.
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Containers.readAll'
    name: readAll(FeedOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Read all containers.
    syntax:
      content: 'function readAll(options?: FeedOptions)'
      parameters:
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: >-
            Use to set options like response page size, continuation tokens,
            etc.
          optional: true
      return:
        type:
          - >-
            @azure/cosmos.QueryIterator<@azure/cosmos.ContainerDefinition &
            @azure/cosmos.Resource>
        description: >-
          Allows you to return all containers in an array or iterate over them
          one at a time.
    package: '@azure/cosmos'
references:
  - uid: '@azure/cosmos.Database'
    name: Database
    spec.typeScript:
      - name: Database
        fullName: Database
        uid: '@azure/cosmos.Database'
  - uid: '@azure/cosmos.ContainerRequest'
    name: ContainerRequest
    spec.typeScript:
      - name: ContainerRequest
        fullName: ContainerRequest
        uid: '@azure/cosmos.ContainerRequest'
  - uid: '@azure/cosmos.RequestOptions'
    name: RequestOptions
    spec.typeScript:
      - name: RequestOptions
        fullName: RequestOptions
        uid: '@azure/cosmos.RequestOptions'
  - uid: Promise<@azure/cosmos.ContainerResponse>
    name: ContainerResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ContainerResponse
        fullName: ContainerResponse
        uid: '@azure/cosmos.ContainerResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/cosmos.SqlQuerySpec'
    name: SqlQuerySpec
    spec.typeScript:
      - name: SqlQuerySpec
        fullName: SqlQuerySpec
        uid: '@azure/cosmos.SqlQuerySpec'
  - uid: '@azure/cosmos.FeedOptions'
    name: FeedOptions
    spec.typeScript:
      - name: FeedOptions
        fullName: FeedOptions
        uid: '@azure/cosmos.FeedOptions'
  - uid: '@azure/cosmos.QueryIterator<any>'
    name: QueryIterator<any>
    spec.typeScript:
      - name: QueryIterator
        fullName: QueryIterator
        uid: '@azure/cosmos.QueryIterator'
      - name: <any>
        fullName: <any>
  - uid: '@azure/cosmos.QueryIterator<T>'
    name: QueryIterator<T>
    spec.typeScript:
      - name: QueryIterator
        fullName: QueryIterator
        uid: '@azure/cosmos.QueryIterator'
      - name: <T>
        fullName: <T>
  - uid: >-
      @azure/cosmos.QueryIterator<@azure/cosmos.ContainerDefinition &
      @azure/cosmos.Resource>
    name: Resource>
    spec.typeScript:
      - name: QueryIterator
        fullName: QueryIterator
        uid: '@azure/cosmos.QueryIterator'
      - name: <
        fullName: <
      - name: ContainerDefinition
        fullName: ContainerDefinition
        uid: '@azure/cosmos.ContainerDefinition'
      - name: ' & '
        fullName: ' & '
      - name: Resource
        fullName: Resource
        uid: '@azure/cosmos.Resource'
      - name: '>'
        fullName: '>'
